// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Item Model
model Item {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  description             String?
  category                Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId              String                    @db.ObjectId
  sku                     String                    @unique
  barcode                 String?
  quantity                Int
  unit                    Unit                      @relation(fields: [unitId], references: [id])
  unitId                  String                    @db.ObjectId
  brand                   Brand                     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId                 String                    @db.ObjectId
  sellingPrice            Float
  buyingPrice             Float
  supplier                Supplier                  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId              String                    @db.ObjectId
  reOrderPoint            Int                    
  location                String?
  imageUrl                String
  weight                  Float?
  dimensions              String?
  taxRate                 Float
  notes                   String?
  // Relationships
  addStockAdjustments      AddStockAdjustment[]
  transferStockAdjustments TransferStockAdjustment[]


  warehouse               Warehouse                 @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId             String                    @db.ObjectId

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
}

// Add Stock 
// Category Modal
model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  items        Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Brand Modal
model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Warehouse Model
model Warehouse {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  location      String?
  description   String?
  warehouseType String

  // Relationships
  addStockAdjustments      AddStockAdjustment[]
  transferStockAdjustments TransferStockAdjustment[]

// Relationship  after adding warehouse in Item Schema
  items        Item[]

// Now add Stock Quantity to Warehouse
  stockQty   Int  @default(0)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Unit Model
model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  abbreviation String
  items         Item[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Create Relationship of AddStockAdjustment and TransferStockAdjustment
// Add Stock Adjustment Model
model AddStockAdjustment {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  addStockQty     Int
  notes           String?
  referenceNumber String

  // Warehouse Relation
  receivingWarehouseId String
  warehouse            Warehouse @relation(fields: [receivingWarehouseId], references: [id])

  // Item Relation
  itemId String @db.ObjectId
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  // Also need Supplier
  supplierId String @db.ObjectId
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Transfer Stock Adjustment Model
model TransferStockAdjustment {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  transferStockQty Int
  notes            String?
  referenceNumber  String

  // Warehouse Relations
  receivingWarehouseId String
  //receivingWarehouse        Warehouse @relation(fields: [receivingWarehouseId], references: [id])

  givingWarehouseId String
  //givingWarehouse        Warehouse @relation(fields: [givingWarehouseId], references: [id])

  // Item Relation
  itemId String @db.ObjectId
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  Warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?    @db.ObjectId
}

// Supplier Model
model Supplier {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  phone         String?
  email         String?
  address       String?
  contactPerson String?
  supplierCode  String  @unique
  paymentTerms  String?
  taxID         String?
  notes         String?
  items          Item[]


  //Also need this Relationships in supplier
  addStockAdjustments      AddStockAdjustment[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// Next Authentication
model User {
  id                String    @id @default(auto())  @map("_id") @db.ObjectId
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  companyName       String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}